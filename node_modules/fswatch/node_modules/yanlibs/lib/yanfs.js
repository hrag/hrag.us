var fs = require('fs'),
    translate = require('yanlibs/lib/yanfnmatch').translate;

// kind of fs.readFileSync
exports.readupFileSync = function(filename, pos, encoding) {
    var stat = fs.statSync(filename),
        r = 0,
        total = 0;

    if (stat.size > pos) {
        var fd = fs.openSync(filename, 'r'),
            buffer = new Buffer(stat.size - pos);

        do {
            r = fs.readSync(fd, buffer, total, stat.size - pos - total, pos + total);
            total += r;
        } while (r > 0 && total < buffer.length);

        fs.closeSync(fd);

        return { nread: total, data: encoding? buffer.toString(encoding) : buffer };
    } else return { nread: 0, data: '' };
};

exports.echoFileSync = function(filename, encoding) {
    require('sys').print(exports.readupFileSync(filename, 0, encoding).data);
};

exports.getMatcher = function(m) {
    var i, re, evmatcher;

    if (m instanceof Array) {
        for (i = 0; i < m.length; i++) {
            if (typeof m[i] === 'string') m[i] = new RegExp(translate(m[i]) + '$');
        }
        return function(s, e) {
            //var r = false;
            for (i = 0; i < m.length; i++) {
                evmatcher = m[i];
                if ((evmatcher instanceof RegExp && evmatcher.test(s)) ||
                    (evmatcher instanceof Function && evmatcher(s, e))) {
                    return true;
                }
            }
            return false;
        }
    } else if (typeof m === 'string') {
        return new RegExp(translate(m));
    } else if (m instanceof RegExp || m instanceof Function) {
        return m;
    } else {
        console.log('Неподдерживаемый тип matcher\'а: ');
        console.log(m);
        return null; // TODO: выбрасывать exception? писать в консоль?
    }
};

exports.fileExistsSync = function(filename) {
    try {
        fs.openSync(filename, 'r');
    } catch (e) {
        return false;
    }

    return true;
};
